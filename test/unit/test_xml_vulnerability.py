import unittest
from unittest.mock import Mock

import lxml

from nbxmpp.stream_parser import StreamParser


class XMLVulnerability(unittest.TestCase):

    def test_exponential_entity_expansion(self):
        bomb = """<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE bomb [
            <!ENTITY a "test">
            <!ENTITY b "&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;&a;">
            <!ENTITY c "&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;&b;">
        ]>
        <bomb>&c;</bomb>"""

        parser = StreamParser(Mock())
        with self.assertRaises(lxml.etree.XMLSyntaxError) as error:
            parser.feed(bomb)
        self.assertTrue('entity reference loop' in error.exception.msg)

    def test_quadratic_blowup(self):
        bomb = """<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE bomb [
        <!ENTITY a "xxxxxxx... a couple of ten thousand chars">
        ]>
        <bomb>&a;&a;&a;... repeat</bomb>"""

        def dispatch(element):
            self.assertTrue(element.tostring() == '<bomb>&a;&a;&a;... repeat</bomb>')

        parser = StreamParser(dispatch)
        parser.feed(bomb)

    def test_external_entity_expansion(self):
        bomb = """<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE external [
        <!ENTITY ee SYSTEM "http://www.python.org/some.xml">
        ]>
        <root>&ee;</root>"""

        def dispatch(element):
            self.assertTrue(element.tostring() == '<root>&ee;</root>')

        parser = StreamParser(dispatch)
        parser.feed(bomb)

    def test_external_local_entity_expansion(self):
        bomb = """<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE external [
        <!ENTITY ee SYSTEM "file:///PATH/TO/simple.xml">
        ]>
        <root>&ee;</root>"""

        def dispatch(element):
            self.assertTrue(element.tostring() == '<root>&ee;</root>')

        parser = StreamParser(dispatch)
        parser.feed(bomb)

    def test_dtd_retrival(self):
        bomb = """<?xml version="1.0" encoding="utf-8"?>
        <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
          "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
        <html>
            <head/>
            <body>text</body>
        </html>"""

        parser = StreamParser(Mock())
        parser.feed(bomb)
        tree = parser.get_tree()
        self.assertTrue(tree.docinfo.externalDTD is None)


if __name__ == '__main__':
    unittest.main()
